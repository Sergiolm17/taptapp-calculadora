---
import Nav from '../components/Nav.astro';
import "../styles/global.css";

---
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Costos de Impresión PDF</title>
</head>
<body class="bg-gray-100 m-0">
    <Nav />
    <div class="max-w-3xl mx-auto px-4 py-4 sm:py-6">
        <div class="bg-white p-4 sm:p-8 rounded-lg shadow-md">
            <h1 class="text-2xl sm:text-3xl text-gray-800 mb-4 sm:mb-6 text-center">Calculadora de Costos de Impresión PDF</h1>
            
            <div class="text-center my-4 sm:my-8">
                <label for="pdfInput" class="block w-full max-w-xs mx-auto bg-blue-500 text-white px-3 py-2 sm:px-6 sm:py-3 rounded-md cursor-pointer hover:bg-blue-600 transition-colors text-center">
                    Elegir archivo PDF
                    <input
                        type="file" 
                        id="pdfInput" 
                        accept="application/pdf"
                        class="hidden"
                    >
                </label>
                <div id="fileName" class="mt-2 text-sm text-gray-600"></div>
                <div id="loading" class="hidden text-gray-600 mt-4">Procesando PDF...</div>
            </div>

            <!-- Selector de perfil de color -->
            <div class="mb-6 max-w-lg mx-auto">
                <label for="colorProfile" class="block text-sm font-medium text-gray-700 mb-1">
                    Perfil de color para cálculos:
                </label>
                <div class="flex flex-col sm:flex-row items-center gap-2">
                    <select id="colorProfile" class="flex-grow bg-white border border-gray-300 rounded-md px-3 py-2 text-sm">
                        <option value="default">Perfil por defecto del PDF</option>
                        <option value="ISOcoated_v2_eci">ISO Coated v2 (ECI)</option>
                        <option value="FOGRA39">FOGRA39</option>
                        <option value="USWebCoatedSWOP">US Web Coated (SWOP) v2</option>
                        <option value="GRACoL2006_Coated1v2">GRACoL 2006 (ISO 12647-2:2004)</option>
                    </select>
                    <div class="text-xs text-gray-600 sm:text-right">
                        <span id="profileInfo">
                            El perfil por defecto usa una conversión estándar RGB a CMYK
                        </span>
                    </div>
                </div>
            </div>

            <div id="pdfContainer" class="flex flex-col items-center">
                <div id="pdfPreview" class="w-full my-4 sm:my-6 flex justify-center">
                    <canvas id="pdfCanvas" class="border-2 border-gray-200 rounded-lg p-2 bg-white"></canvas>
                </div>
                
                <div class="flex justify-between items-center mb-4 gap-2 w-full max-w-md">
                    <button id="prevPage" class="bg-gray-300 px-2 py-1 sm:px-4 sm:py-2 rounded-md disabled:opacity-50 text-sm sm:text-base">Anterior</button>
                    <div id="pageInfo" class="text-gray-700 text-sm sm:text-base">Página 0 de 0</div>
                    <button id="nextPage" class="bg-gray-300 px-2 py-1 sm:px-4 sm:py-2 rounded-md disabled:opacity-50 text-sm sm:text-base">Siguiente</button>
                </div>
            </div>

            <div id="results" class="bg-gray-50 p-3 sm:p-6 rounded-lg mt-4 sm:mt-8 hidden">
                <h2 class="text-xl sm:text-2xl text-gray-800 mb-4 sm:mb-6">Resultados del análisis</h2>
                <p id="pagesInfo" class="mb-3 sm:mb-4 text-sm sm:text-base">Número de páginas: <span id="pageCount">0</span></p>
                
                <!-- Resumen visual de costos por tinta -->
                <div id="inkCostSummary" class="grid grid-cols-2 sm:grid-cols-4 gap-3 mb-6"></div>
                
                <div class="overflow-x-auto">
                    <table class="min-w-full bg-white rounded-lg overflow-hidden text-sm sm:text-base">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="py-1 px-2 sm:py-2 sm:px-4 border-b">Página</th>
                                <th class="py-1 px-2 sm:py-2 sm:px-4 border-b">Cian %</th>
                                <th class="py-1 px-2 sm:py-2 sm:px-4 border-b">Magenta %</th>
                                <th class="py-1 px-2 sm:py-2 sm:px-4 border-b">Amarillo %</th>
                                <th class="py-1 px-2 sm:py-2 sm:px-4 border-b">Negro %</th>
                                <th class="py-1 px-2 sm:py-2 sm:px-4 border-b">Costo</th>
                            </tr>
                        </thead>
                        <tbody id="pageResultsBody">
                            <!-- Los resultados por página se mostrarán aquí -->
                        </tbody>
                    </table>
                </div>
                
                <div id="totalCostResult" class="text-xl sm:text-2xl text-green-600 font-bold text-center my-3 sm:my-5"></div>
                <div class="text-xs sm:text-sm text-gray-500 mt-3 sm:mt-5">
                    * Cálculo basado en consumo de tóner donde 450g a 5% de cobertura rinde 60000 páginas y costo de S/130 por 400g de tóner
                </div>
            </div>
        </div>
    </div>

    <!-- Incluir PDF.js -->
    <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
    <script is:inline>
        // Configurar PDF.js worker
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';

        // Verificar si se está reanalizando un documento desde el historial
        function checkForReanalysis() {
            const urlParams = new URLSearchParams(window.location.search);
            const reanalyzeId = urlParams.get('reanalyze');
            const profileParam = urlParams.get('profile');
            
            if (reanalyzeId) {
                // Buscar en el historial de PDFs
                try {
                    const history = JSON.parse(localStorage.getItem('taptappPdfHistory') || '[]');
                    const item = history.find(h => h.id === reanalyzeId || h.date === reanalyzeId);
                    
                    if (item) {
                        // Si se encontró, establecer el perfil de color si existe
                        if (profileParam || item.colorProfile) {
                            const profile = profileParam || item.colorProfile;
                            const profileSelect = document.getElementById('colorProfile');
                            if (profileSelect && profileSelect.querySelector(`option[value="${profile}"]`)) {
                                profileSelect.value = profile;
                                // Disparar el evento change para actualizar la descripción
                                profileSelect.dispatchEvent(new Event('change'));
                            }
                        }
                    }
                } catch (e) {
                    console.warn('Error al buscar en historial para reanalizar:', e);
                }
            }
        }
        
        // Ejecutar después de cargar el DOM
        document.addEventListener('DOMContentLoaded', checkForReanalysis);

        // Valores predeterminados en caso de que no haya configuración guardada
        const DEFAULT_SETTINGS = {
            tonerPrice: 130,
            tonerWeight: 400,
            tonerYield: 60000,
            coveragePercent: 5,
            tonerYieldWeight: 450
        };
        
        // Calcular constantes a partir de la configuración
        let TONER_COST_PER_GRAM;
        let GRAMS_PER_PAGE_PER_20_PERCENT;
        
        // Área de referencia A4 en puntos (72 puntos por pulgada)
        const A4_AREA_POINTS = (8.27 * 11.69) * (72 * 72); // A4 en pulgadas * puntos por pulgada al cuadrado
        
        let pdfDoc = null;
        let pageNum = 1;
        let pageRendering = false;
        let pageNumPending = null;
        let canvas = document.getElementById('pdfCanvas');
        let ctx = canvas.getContext('2d');
        let pageResults = [];
        let currentScale = 1.5;
        let totalInkCosts = {
            cyan: 0,
            magenta: 0,
            yellow: 0,
            black: 0
        };
        
        // Perfiles de color CMYK
        const colorProfiles = {
            // Valores de matrices de transformación simplificadas para cada perfil
            // Estas matrices son aproximaciones y deberían ser reemplazadas por implementaciones
            // completas de gestión de color ICC
            default: {
                name: "Perfil por defecto del PDF",
                description: "Conversión estándar simple de RGB a CMYK",
                // En la conversión por defecto, se usa la fórmula estándar de sustracción
                // sin transformación adicional
                transform: null
            },
            ISOcoated_v2_eci: {
                name: "ISO Coated v2 (ECI)",
                description: "Optimizado para impresión offset en papel estucado en Europa",
                // Factores de ajuste para simular el perfil ISO Coated v2
                // Estos factores son aproximaciones y se aplicarán a los valores CMYK calculados
                transform: {
                    cyan: 1.05,    // Ajuste del 5% más de cian
                    magenta: 0.98, // Ajuste del 2% menos de magenta
                    yellow: 0.95,  // Ajuste del 5% menos de amarillo
                    black: 1.1     // Ajuste del 10% más de negro
                }
            },
            FOGRA39: {
                name: "FOGRA39",
                description: "Similar a ISO Coated v2, pero para impresiones de alta calidad",
                transform: {
                    cyan: 1.08,    // Ajuste del 8% más de cian
                    magenta: 0.97, // Ajuste del 3% menos de magenta
                    yellow: 0.93,  // Ajuste del 7% menos de amarillo
                    black: 1.15    // Ajuste del 15% más de negro
                }
            },
            USWebCoatedSWOP: {
                name: "US Web Coated (SWOP) v2",
                description: "Común en EE.UU. para impresión en papel couché (estucado)",
                transform: {
                    cyan: 0.95,    // Ajuste del 5% menos de cian
                    magenta: 1.05, // Ajuste del 5% más de magenta
                    yellow: 1.02,  // Ajuste del 2% más de amarillo
                    black: 1.05    // Ajuste del 5% más de negro
                }
            },
            GRACoL2006_Coated1v2: {
                name: "GRACoL 2006 (ISO 12647-2:2004)",
                description: "Para impresiones comerciales de alta calidad en papel no estucado",
                transform: {
                    cyan: 0.97,    // Ajuste del 3% menos de cian
                    magenta: 1.03, // Ajuste del 3% más de magenta
                    yellow: 1.0,   // Sin ajuste para amarillo
                    black: 1.12    // Ajuste del 12% más de negro
                }
            }
        };
        
        // Perfil de color actual seleccionado
        let currentColorProfile = 'default';
        
        // Actualizar información del perfil al cambiar la selección
        document.getElementById('colorProfile').addEventListener('change', function() {
            currentColorProfile = this.value;
            const profile = colorProfiles[currentColorProfile];
            document.getElementById('profileInfo').textContent = profile.description;
            
            // Si ya hay un documento cargado, volver a analizar con el nuevo perfil
            if (pdfDoc) {
                // Reiniciar resultados
                pageResults = [];
                totalInkCosts = {
                    cyan: 0,
                    magenta: 0, 
                    yellow: 0,
                    black: 0
                };
                
                // Volver a analizar y mostrar resultados
                document.getElementById('loading').style.display = 'block';
                document.getElementById('results').style.display = 'none';
                
                analyzeAllPages().then(() => {
                    document.getElementById('loading').style.display = 'none';
                    document.getElementById('results').style.display = 'block';
                    showResults();
                });
            }
        });

        // Cargar configuración desde localStorage
        function loadSettings() {
            let settings;
            try {
                const savedSettings = localStorage.getItem('taptappSettings');
                settings = savedSettings ? JSON.parse(savedSettings) : DEFAULT_SETTINGS;
            } catch (e) {
                console.error('Error al cargar la configuración:', e);
                settings = DEFAULT_SETTINGS;
            }
            
            // Calcular las constantes utilizadas en los cálculos
            TONER_COST_PER_GRAM = settings.tonerPrice / settings.tonerWeight;
            const gramsPerPageAtCoverage = settings.tonerYieldWeight / settings.tonerYield;
            GRAMS_PER_PAGE_PER_20_PERCENT = gramsPerPageAtCoverage * (20 / settings.coveragePercent);
            
            // Actualizar texto explicativo
            const explanationText = document.querySelector('.text-xs.sm\\:text-sm.text-gray-500');
            if (explanationText) {
                explanationText.textContent = `* Cálculo basado en consumo de tóner donde ${settings.tonerYieldWeight}g a ${settings.coveragePercent}% de cobertura rinde ${settings.tonerYield} páginas y costo de S/${settings.tonerPrice} por ${settings.tonerWeight}g de tóner`;
            }
        }
        
        // Cargar configuración al inicio
        loadSettings();

        // Ajustar tamaño del canvas cuando cambia el tamaño de la ventana
        function resizeCanvas() {
            if (pdfDoc) {
                // Volver a renderizar la página actual con escala ajustada
                renderPage(pageNum);
            }
        }

        // Manejar la selección de archivo y mostrar el nombre
        document.getElementById('pdfInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            // Mostrar nombre del archivo
            document.getElementById('fileName').textContent = file.name;
            
            // Mostrar contenedor del PDF
            document.getElementById('pdfContainer').style.display = 'flex';
            
            const reader = new FileReader();
            
            document.getElementById('loading').style.display = 'block';
            document.getElementById('results').style.display = 'none';
            pageResults = [];
            // Reiniciar costos de tinta totales
            totalInkCosts = {
                cyan: 0,
                magenta: 0,
                yellow: 0,
                black: 0
            };

            reader.onload = function(event) {
                const typedarray = new Uint8Array(event.target.result);
                loadPdfDocument(typedarray);
            };
            reader.readAsArrayBuffer(file);
        });

        function loadPdfDocument(typedarray) {
            pdfjsLib.getDocument({
                data: typedarray,
                // Habilitar extracción de metadata
                cMapUrl: 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/cmaps/',
                cMapPacked: true
            }).promise.then(function(pdf) {
                pdfDoc = pdf;
                document.getElementById('pageInfo').textContent = `Página ${pageNum} de ${pdfDoc.numPages}`;
                document.getElementById('pageCount').textContent = pdfDoc.numPages;
                
                // Intentar obtener metadatos y detectar perfil de color embebido
                pdf.getMetadata().then(function(metadata) {
                    if (metadata && metadata.info) {
                        detectEmbeddedColorProfile(metadata)
                            .then(profileInfo => {
                                if (profileInfo) {
                                    // Si se detectó un perfil, mostrar información
                                    document.getElementById('profileInfo').innerHTML = 
                                        `<span class="text-green-600">Detectado perfil embebido: ${profileInfo.name || 'Desconocido'}</span>`;
                                }
                            })
                            .catch(err => {
                                console.warn("No se pudo detectar perfil de color:", err);
                            });
                    }
                }).catch(function(err) {
                    console.warn("No se pudo obtener metadatos del PDF:", err);
                });
                
                // Analizar todas las páginas
                analyzeAllPages().then(() => {
                    // Mostrar la primera página
                    renderPage(pageNum);
                    document.getElementById('loading').style.display = 'none';
                    document.getElementById('results').style.display = 'block';
                    
                    // Mostrar resultados
                    showResults();
                });
            }).catch(function(error) {
                console.error('Error loading PDF:', error);
                document.getElementById('loading').style.display = 'none';
                alert('Error al cargar el PDF. Por favor, intenta con otro archivo.');
            });
        }

        // Función para detectar perfiles de color embebidos en el PDF
        async function detectEmbeddedColorProfile(metadata) {
            try {
                if (!metadata) return null;
                
                // Revisar si hay información de color en los metadatos
                let profileInfo = null;
                
                // Buscar información en diferentes lugares donde podría estar almacenada
                if (metadata.info && metadata.info.PDFXVersion) {
                    // PDF/X contiene información de perfil de color
                    profileInfo = {
                        name: `PDF/X (${metadata.info.PDFXVersion})`,
                        source: 'PDF/X',
                        description: 'Estándar PDF/X con perfil de color embebido'
                    };
                } else if (metadata.info && metadata.info.Subject && 
                          metadata.info.Subject.includes('Profile')) {
                    // A veces la información del perfil aparece en el asunto
                    profileInfo = {
                        name: metadata.info.Subject,
                        source: 'Metadatos (Asunto)',
                        description: 'Perfil mencionado en metadatos del documento'
                    };
                } else if (metadata.metadata && metadata.metadata._metadataMap) {
                    // Buscar en metadatos XMP si están disponibles
                    const xmp = metadata.metadata._metadataMap;
                    
                    if (xmp.has('pdfxid:GTS_PDFXVersion')) {
                        profileInfo = {
                            name: xmp.get('pdfxid:GTS_PDFXVersion'),
                            source: 'XMP',
                            description: 'Perfil PDF/X definido en metadatos XMP'
                        };
                    } else if (xmp.has('xmpMM:DocumentID')) {
                        // Información general que podría ayudar a identificar el perfil
                        profileInfo = {
                            name: 'Perfil embebido (sin identificar)',
                            source: 'XMP',
                            description: 'Documento con metadatos XMP'
                        };
                    }
                }
                
                // También obtener la primera página para analizar objetos de recursos
                const page = await pdfDoc.getPage(1);
                if (page && page._pdfInfo && page._pdfInfo.colorSpace) {
                    profileInfo = {
                        name: 'Perfil detectado en espacio de color',
                        source: 'ColorSpace',
                        description: 'Espacio de color definido en el documento'
                    };
                }
                
                return profileInfo;
            } catch (e) {
                console.warn('Error al detectar perfil de color:', e);
                return null;
            }
        }

        async function analyzeAllPages() {
            for (let i = 1; i <= pdfDoc.numPages; i++) {
                await pdfDoc.getPage(i).then(function(page) {
                    const viewport = page.getViewport({ scale: 1.0 });
                    const tempCanvas = document.createElement('canvas');
                    const tempCtx = tempCanvas.getContext('2d');
                    
                    // Calcular el área real de la página en puntos
                    const pageArea = viewport.width * viewport.height;
                    // Factor de escala basado en el área relativa a un A4
                    const areaScaleFactor = pageArea / A4_AREA_POINTS;
                    
                    tempCanvas.width = viewport.width;
                    tempCanvas.height = viewport.height;
                    
                    return page.render({
                        canvasContext: tempCtx,
                        viewport: viewport
                    }).promise.then(function() {
                        const coverage = calculateCoverage(tempCanvas);
                        const cost = calculateCost(coverage, areaScaleFactor);
                        
                        // Acumular costos de tinta
                        totalInkCosts.cyan += cost.cyan;
                        totalInkCosts.magenta += cost.magenta;
                        totalInkCosts.yellow += cost.yellow;
                        totalInkCosts.black += cost.black;
                        
                        pageResults.push({
                            pageNum: i,
                            coverage,
                            cost,
                            dimensions: {
                                width: viewport.width,
                                height: viewport.height,
                                area: pageArea,
                                scaleFactor: areaScaleFactor
                            }
                        });
                    });
                });
            }
        }

        function calculateScaleForViewport() {
            // Obtener el ancho disponible para el canvas (ancho del contenedor menos padding)
            const containerWidth = document.getElementById('pdfPreview').clientWidth - 20;
            const scale = containerWidth < 768 ? 0.9 : 1.2;
            return Math.min(scale, containerWidth / 650); // Limitar escala para que quepa en el contenedor
        }

        function renderPage(num) {
            pageRendering = true;
            
            pdfDoc.getPage(num).then(function(page) {
                currentScale = calculateScaleForViewport();
                const viewport = page.getViewport({ scale: currentScale });
                
                // Ajustar dimensiones del canvas
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                
                const renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                
                page.render(renderContext).promise.then(function() {
                    pageRendering = false;
                    
                    if (pageNumPending !== null) {
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
                
                document.getElementById('pageInfo').textContent = `Página ${num} de ${pdfDoc.numPages}`;
                
                // Actualizar botones
                document.getElementById('prevPage').disabled = num <= 1;
                document.getElementById('nextPage').disabled = num >= pdfDoc.numPages;
            });
        }

        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }

        document.getElementById('prevPage').addEventListener('click', function() {
            if (pageNum <= 1) return;
            pageNum--;
            queueRenderPage(pageNum);
        });

        document.getElementById('nextPage').addEventListener('click', function() {
            if (pageNum >= pdfDoc.numPages) return;
            pageNum++;
            queueRenderPage(pageNum);
        });

        function calculateCoverage(canvas) {
            const ctx = canvas.getContext('2d');
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;

            let cTotal = 0, mTotal = 0, yTotal = 0, kTotal = 0;
            const pixelCount = canvas.width * canvas.height;

            // Algoritmos de conversión de color según el perfil seleccionado
            const algorithms = {
                // Algoritmo por defecto (simple)
                default: function(r, g, b) {
                    // Conversión RGB a CMYK básica
                    const k = 1 - Math.max(r, g, b);
                    const c = k === 1 ? 0 : (1 - r - k)/(1 - k);
                    const m = k === 1 ? 0 : (1 - g - k)/(1 - k);
                    const y = k === 1 ? 0 : (1 - b - k)/(1 - k);
                    
                    return {c, m, y, k};
                },
                
                // Conversión ISO Coated v2 (ECI)
                ISOcoated_v2_eci: function(r, g, b) {
                    // Primero convertir RGB a espacio de color LinearRGB
                    let linearR = (r <= 0.04045) ? r/12.92 : Math.pow((r + 0.055)/1.055, 2.4);
                    let linearG = (g <= 0.04045) ? g/12.92 : Math.pow((g + 0.055)/1.055, 2.4);
                    let linearB = (b <= 0.04045) ? b/12.92 : Math.pow((b + 0.055)/1.055, 2.4);
                    
                    // Aplicar matriz de transformación ISO Coated v2
                    let c = 0.9253*linearR + 0.0658*linearG + 0.0089*linearB;
                    let m = 0.0380*linearR + 0.9515*linearG + 0.0105*linearB;
                    let y = 0.0298*linearR + 0.1725*linearG + 0.7977*linearB;
                    
                    // Ajuste para ISO Coated v2
                    c = 1 - Math.min(1, Math.max(0, c));
                    m = 1 - Math.min(1, Math.max(0, m));
                    y = 1 - Math.min(1, Math.max(0, y));
                    
                    // Calcular K y ajustar CMY
                    const k = Math.min(c, m, y);
                    
                    // UCR (Under Color Removal) para ISO Coated
                    const ucrFactor = 0.85;
                    
                    if (k > 0) {
                        c = (c - k * ucrFactor) / (1 - k * ucrFactor);
                        m = (m - k * ucrFactor) / (1 - k * ucrFactor);
                        y = (y - k * ucrFactor) / (1 - k * ucrFactor);
                    }
                    
                    return {c, m, y, k};
                },
                
                // Conversión FOGRA39
                FOGRA39: function(r, g, b) {
                    // Primero convertir RGB a espacio de color LinearRGB
                    let linearR = (r <= 0.04045) ? r/12.92 : Math.pow((r + 0.055)/1.055, 2.4);
                    let linearG = (g <= 0.04045) ? g/12.92 : Math.pow((g + 0.055)/1.055, 2.4);
                    let linearB = (b <= 0.04045) ? b/12.92 : Math.pow((b + 0.055)/1.055, 2.4);
                    
                    // Aplicar matriz de transformación FOGRA39
                    let c = 0.9389*linearR + 0.0371*linearG + 0.0240*linearB;
                    let m = 0.0224*linearR + 0.9684*linearG + 0.0092*linearB;
                    let y = 0.0103*linearR + 0.1104*linearG + 0.8793*linearB;
                    
                    c = 1 - Math.min(1, Math.max(0, c));
                    m = 1 - Math.min(1, Math.max(0, m));
                    y = 1 - Math.min(1, Math.max(0, y));
                    
                    // Calcular K con ajuste específico de FOGRA39
                    const k = Math.min(c, m, y) * 1.15;
                    
                    // GCR (Gray Component Replacement) para FOGRA39
                    const gcrFactor = 0.90;
                    
                    if (k > 0) {
                        c = (c - k * gcrFactor) / (1 - k * gcrFactor);
                        m = (m - k * gcrFactor) / (1 - k * gcrFactor);
                        y = (y - k * gcrFactor) / (1 - k * gcrFactor);
                    }
                    
                    return {c, m, y, k: Math.min(1, k)};
                },
                
                // Conversión US Web Coated (SWOP) v2
                USWebCoatedSWOP: function(r, g, b) {
                    // Primero convertir RGB a espacio de color LinearRGB
                    let linearR = (r <= 0.04045) ? r/12.92 : Math.pow((r + 0.055)/1.055, 2.4);
                    let linearG = (g <= 0.04045) ? g/12.92 : Math.pow((g + 0.055)/1.055, 2.4);
                    let linearB = (b <= 0.04045) ? b/12.92 : Math.pow((b + 0.055)/1.055, 2.4);
                    
                    // Aplicar matriz de transformación SWOP
                    let c = 0.9047*linearR + 0.0642*linearG + 0.0311*linearB;
                    let m = 0.0412*linearR + 0.9485*linearG + 0.0103*linearB;
                    let y = 0.0159*linearR + 0.1255*linearG + 0.8586*linearB;
                    
                    c = 1 - Math.min(1, Math.max(0, c));
                    m = 1 - Math.min(1, Math.max(0, m));
                    y = 1 - Math.min(1, Math.max(0, y));
                    
                    // Calcular K
                    let k = Math.min(c, m, y) * 0.95;
                    
                    // UCR (Under Color Removal) para SWOP
                    const ucrFactor = 0.70;
                    
                    if (k > 0) {
                        c = (c - k * ucrFactor) / (1 - k * ucrFactor);
                        m = (m - k * ucrFactor) / (1 - k * ucrFactor);
                        y = (y - k * ucrFactor) / (1 - k * ucrFactor);
                    }
                    
                    // Ajuste final para SWOP
                    c *= 0.95;
                    m *= 1.05;
                    y *= 1.02;
                    
                    return {c, m, y, k};
                },
                
                // Conversión GRACoL 2006
                GRACoL2006_Coated1v2: function(r, g, b) {
                    // Primero convertir RGB a espacio de color LinearRGB
                    let linearR = (r <= 0.04045) ? r/12.92 : Math.pow((r + 0.055)/1.055, 2.4);
                    let linearG = (g <= 0.04045) ? g/12.92 : Math.pow((g + 0.055)/1.055, 2.4);
                    let linearB = (b <= 0.04045) ? b/12.92 : Math.pow((b + 0.055)/1.055, 2.4);
                    
                    // Aplicar matriz de transformación GRACoL 2006
                    let c = 0.9178*linearR + 0.0513*linearG + 0.0309*linearB;
                    let m = 0.0298*linearR + 0.9566*linearG + 0.0136*linearB;
                    let y = 0.0123*linearR + 0.1139*linearG + 0.8738*linearB;
                    
                    c = 1 - Math.min(1, Math.max(0, c));
                    m = 1 - Math.min(1, Math.max(0, m));
                    y = 1 - Math.min(1, Math.max(0, y));
                    
                    // Calcular K con ajuste de GRACoL
                    let k = Math.min(c, m, y) * 1.12;
                    
                    // GCR (Gray Component Replacement) para GRACoL
                    const gcrFactor = 0.80;
                    
                    if (k > 0) {
                        c = (c - k * gcrFactor) / (1 - k * gcrFactor) * 0.97;
                        m = (m - k * gcrFactor) / (1 - k * gcrFactor) * 1.03;
                        y = (y - k * gcrFactor) / (1 - k * gcrFactor);
                    }
                    
                    return {c, m, y, k: Math.min(1, k)};
                }
            };
            
            // Si el algoritmo no existe para el perfil seleccionado, usar el default
            const convertToCMYK = algorithms[currentColorProfile] || algorithms.default;

            for(let i = 0; i < data.length; i += 4) {
                const r = data[i]/255;
                const g = data[i+1]/255;
                const b = data[i+2]/255;
                const a = data[i+3]/255;

                // Si el píxel es transparente, no lo contamos
                if (a < 0.1) continue;

                // Aplicar el algoritmo de conversión seleccionado
                const { c, m, y, k } = convertToCMYK(r, g, b);

                cTotal += c;
                mTotal += m;
                yTotal += y;
                kTotal += k;
            }

            return {
                cyan: (cTotal/pixelCount) * 100,
                magenta: (mTotal/pixelCount) * 100,
                yellow: (yTotal/pixelCount) * 100,
                black: (kTotal/pixelCount) * 100
            };
        }

        function calculateCost(coverage, areaScaleFactor = 1) {
            const costPerColor = (percentage) => 
                (percentage/20) * GRAMS_PER_PAGE_PER_20_PERCENT * TONER_COST_PER_GRAM * areaScaleFactor;
            
            return {
                cyan: costPerColor(coverage.cyan),
                magenta: costPerColor(coverage.magenta),
                yellow: costPerColor(coverage.yellow),
                black: costPerColor(coverage.black),
                total: Object.values(coverage).reduce((acc, val) => acc + costPerColor(val), 0)
            };
        }

        function showResults() {
            const tableBody = document.getElementById('pageResultsBody');
            tableBody.innerHTML = '';
            
            let totalCost = 0;
            
            pageResults.forEach(result => {
                const row = document.createElement('tr');
                
                // Añadir celdas a la fila
                const cellClasses = 'py-1 px-2 sm:py-2 sm:px-4 border-b text-center';
                
                // Página y dimensiones
                const pageCell = document.createElement('td');
                pageCell.className = cellClasses;
                const widthMm = (result.dimensions.width / 72) * 25.4;
                const heightMm = (result.dimensions.height / 72) * 25.4;
                pageCell.textContent = `${result.pageNum} (${widthMm.toFixed(0)}×${heightMm.toFixed(0)}mm)`;
                row.appendChild(pageCell);
                
                // Cian
                const cyanCell = document.createElement('td');
                cyanCell.className = cellClasses;
                cyanCell.textContent = result.coverage.cyan.toFixed(1);
                row.appendChild(cyanCell);
                
                // Magenta
                const magentaCell = document.createElement('td');
                magentaCell.className = cellClasses;
                magentaCell.textContent = result.coverage.magenta.toFixed(1);
                row.appendChild(magentaCell);
                
                // Amarillo
                const yellowCell = document.createElement('td');
                yellowCell.className = cellClasses;
                yellowCell.textContent = result.coverage.yellow.toFixed(1);
                row.appendChild(yellowCell);
                
                // Negro
                const blackCell = document.createElement('td');
                blackCell.className = cellClasses;
                blackCell.textContent = result.coverage.black.toFixed(1);
                row.appendChild(blackCell);
                
                // Costo
                const costCell = document.createElement('td');
                costCell.className = cellClasses;
                costCell.textContent = `S/${result.cost.total.toFixed(3)}`;
                row.appendChild(costCell);
                
                tableBody.appendChild(row);
                totalCost += result.cost.total;
            });
            
            // Mostrar resumen de costos por tinta
            showInkCostSummary();
            
            document.getElementById('totalCostResult').innerHTML = `
                Costo total del documento: S/${totalCost.toFixed(3)}
            `;
            
            // Guardar en historial
            saveToHistory(totalCost);
        }
        
        // Guardar análisis en el historial (localStorage)
        function saveToHistory(totalCost) {
            try {
                // Capturar miniatura de la primera página
                const canvas = document.getElementById('pdfCanvas');
                let thumbnail = '';
                
                try {
                    // Intentar crear una miniatura del PDF
                    const MAX_THUMBNAIL_SIZE = 200;
                    const tempCanvas = document.createElement('canvas');
                    const tempCtx = tempCanvas.getContext('2d');
                    
                    // Calcular dimensiones manteniendo proporciones
                    let thumbWidth, thumbHeight;
                    if (canvas.width > canvas.height) {
                        thumbWidth = Math.min(MAX_THUMBNAIL_SIZE, canvas.width);
                        thumbHeight = (canvas.height / canvas.width) * thumbWidth;
                    } else {
                        thumbHeight = Math.min(MAX_THUMBNAIL_SIZE, canvas.height);
                        thumbWidth = (canvas.width / canvas.height) * thumbHeight;
                    }
                    
                    tempCanvas.width = thumbWidth;
                    tempCanvas.height = thumbHeight;
                    tempCtx.fillStyle = '#fff';
                    tempCtx.fillRect(0, 0, thumbWidth, thumbHeight);
                    tempCtx.drawImage(canvas, 0, 0, thumbWidth, thumbHeight);
                    
                    thumbnail = tempCanvas.toDataURL('image/jpeg', 0.7);
                } catch (e) {
                    console.warn('No se pudo crear miniatura del PDF', e);
                }
                
                // Crear entrada de historial
                const historyItem = {
                    id: 'pdf_' + Date.now(),
                    type: 'pdf',
                    date: new Date().toISOString(),
                    filename: document.getElementById('fileName').textContent,
                    pages: pageResults,
                    totalCost: totalCost,
                    inkCosts: totalInkCosts,
                    pageCount: pdfDoc.numPages,
                    thumbnail: thumbnail,
                    colorProfile: currentColorProfile // Guardar el perfil de color utilizado
                };
                
                // Recuperar historial existente
                const history = JSON.parse(localStorage.getItem('taptappPdfHistory') || '[]');
                
                // Limitar a 50 entradas máximo
                if (history.length >= 50) {
                    history.pop(); // Eliminar la entrada más antigua
                }
                
                // Añadir nueva entrada al principio
                history.unshift(historyItem);
                
                // Guardar historial actualizado
                localStorage.setItem('taptappPdfHistory', JSON.stringify(history));
                
                // Añadir enlace al historial en la interfaz
                const resultsElement = document.getElementById('results');
                if (!document.getElementById('historyLink')) {
                    const historyLink = document.createElement('div');
                    historyLink.id = 'historyLink';
                    historyLink.className = 'mt-4 text-center';
                    historyLink.innerHTML = `
                        <a href="/historial" class="text-blue-600 hover:text-blue-800 text-sm">
                            Ver historial de análisis →
                        </a>
                    `;
                    resultsElement.appendChild(historyLink);
                }
            } catch (e) {
                console.error('Error al guardar en historial:', e);
            }
        }
        
        function showInkCostSummary() {
            const summaryContainer = document.getElementById('inkCostSummary');
            summaryContainer.innerHTML = `
                <div class="bg-cyan-500 text-white p-3 sm:p-4 rounded-md text-center font-bold flex flex-col justify-center">
                    <div class="text-base sm:text-lg">Cian</div>
                    <div class="text-lg sm:text-xl">S/${totalInkCosts.cyan.toFixed(2)}</div>
                </div>
                <div class="bg-fuchsia-500 text-white p-3 sm:p-4 rounded-md text-center font-bold flex flex-col justify-center">
                    <div class="text-base sm:text-lg">Magenta</div>
                    <div class="text-lg sm:text-xl">S/${totalInkCosts.magenta.toFixed(2)}</div>
                </div>
                <div class="bg-yellow-400 text-white p-3 sm:p-4 rounded-md text-center font-bold flex flex-col justify-center">
                    <div class="text-base sm:text-lg">Amarillo</div>
                    <div class="text-lg sm:text-xl">S/${totalInkCosts.yellow.toFixed(2)}</div>
                </div>
                <div class="bg-black text-white p-3 sm:p-4 rounded-md text-center font-bold flex flex-col justify-center">
                    <div class="text-base sm:text-lg">Negro</div>
                    <div class="text-lg sm:text-xl">S/${totalInkCosts.black.toFixed(2)}</div>
                </div>
            `;
        }

        // Inicialización y configuración
        document.addEventListener('DOMContentLoaded', function() {
            // Ocultar inicialmente el contenedor del PDF hasta que se seleccione un archivo
            if (!pdfDoc) {
                document.getElementById('pdfContainer').style.display = 'none';
            }
        });

        // Escuchar cambios de tamaño de la ventana para ajustar el canvas
        window.addEventListener('resize', resizeCanvas);
    </script>
</body>
</html> 